name: Discord Leveling
on:
  push:
    branches: [main]

jobs:
  run_command:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: get stats
        id: stats
        run: |
          commit_sha=$(git rev-parse HEAD)
          echo "COMMIT_SHA=$commit_sha" >> $GITHUB_ENV
          author_name=$(git log -1 --pretty=format:'%an')
          author_email=$(git log -1 --pretty=format:'%ae')
          
          echo "AUTHOR_NAME=$author_name" >> $GITHUB_ENV
          echo "AUTHOR_EMAIL=$author_email" >> $GITHUB_ENV
          
          added=$(git show --numstat --pretty="" "$commit_sha" | awk '$1 ~ /^[0-9]+$/ {sum += $1} END {print sum+0}')
          echo "ADDITIONS=$added" >> $GITHUB_ENV
          
          deleted=$(git show --numstat --pretty="" "$commit_sha" | awk '$2 ~ /^[0-9]+$/ {sum += $2} END {print sum+0}')
          echo "DELETIONS=$deleted" >> $GITHUB_ENV
          commit_msg=$(git log -1 --pretty=format:'%B')
          commit_msg=$(echo "$commit_msg" | sed -e 's/[;\"'\''\/\\]/\\&/g')
          echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
          echo "$commit_msg" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        
        
          echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
          echo "$commit_msg" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV


      - name: map username
        id: map
        env:
          REPO: ${{ github.repository }}
          SHA: ${{ env.COMMIT_SHA }}
          AUTHOR_EMAIL: ${{ env.AUTHOR_EMAIL }}
        run: |
          # Try to get GitHub user login via GitHub API commit object (more reliable when GitHub linked the commit)
          api_url="https://api.github.com/repos/$REPO/commits/$SHA"
          echo "Querying $api_url" >&2

          commit_json=$(curl -s -H "Accept: application/vnd.github+json" "$api_url")
          login=$(echo "$commit_json" | jq -r '.author.login // empty')
          if [ -n "$login" ]; then
            echo "FOUND_LOGIN=$login" >> $GITHUB_ENV
            echo "mapped: $login" >&2
            exit 0
          fi

          # If not found, try to search commits in the repo by author email (may require token for rate limits)
          if [ -n "$AUTHOR_EMAIL" ] && [ "$AUTHOR_EMAIL" != "null" ]; then
            # Search commits endpoint requires authentication for many queries; try unauthenticated first
            search_url="https://api.github.com/search/commits?q=repo:$REPO+author:$AUTHOR_EMAIL"
            search_json=$(curl -s -H "Accept: application/vnd.github.cloak-preview" "$search_url")
            found_login=$(echo "$search_json" | jq -r '.items[0].author.login // empty')
            if [ -n "$found_login" ]; then
              echo "FOUND_LOGIN=$found_login" >> $GITHUB_ENV
              echo "mapped by search: $found_login" >&2
              exit 0
            fi
          fi
          # Fallback: use git author name
          git_author=$(git log -1 --pretty=format:'%an')
          echo "FOUND_LOGIN=$git_author" >> $GITHUB_ENV
          echo "fallback to author name: $git_author" >&2

      - name: Send message via bot
        env:
          BOT_TOKEN: ${{ secrets.DISCHORD_BOT_TOKEN }}
          CHANNEL_ID: '1417079982848479343'
          AUTHOR: ${{ env.FOUND_LOGIN }}
          ADDITIONS: ${{ env.ADDITIONS }}
          DELETIONS: ${{ env.DELETIONS }}
          MESSAGE: ${{ env.COMMIT_MESSAGE }}
        run: |
          # Build payload
          content="New commit by $AUTHOR $ADDITIONS $DELETIONS"
          message="$MESSAGE"
          payload=$(jq -nc --arg content "$content" --arg message "$message" '{content:$content, description:$message}')
          curl -s -X POST "https://atlas.bot/api/guilds/1417072674219229307/actions/05652f94-93cf-4515-a2cd-73f1cabe0162/webhook/07b5213c6bac954da52a57918d9b32110b028dd647e51c8536bd5cfcefd6f6c7" \
          -H "Authorization: Bot $BOT_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$payload" --ssl-no-revoke || echo "curl failed" >&2
